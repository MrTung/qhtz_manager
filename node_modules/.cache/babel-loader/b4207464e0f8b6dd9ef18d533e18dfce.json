{"remainingRequest":"/Users/dongxuwei/Desktop/系统相关/代码/advance-platform/node_modules/thread-loader/dist/cjs.js!/Users/dongxuwei/Desktop/系统相关/代码/advance-platform/node_modules/babel-loader/lib/index.js!/Users/dongxuwei/Desktop/系统相关/代码/advance-platform/src/main.js","dependencies":[{"path":"/Users/dongxuwei/Desktop/系统相关/代码/advance-platform/src/main.js","mtime":1564188533084},{"path":"/Users/dongxuwei/Desktop/系统相关/代码/advance-platform/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/dongxuwei/Desktop/系统相关/代码/advance-platform/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/dongxuwei/Desktop/系统相关/代码/advance-platform/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"/Users/dongxuwei/Desktop/\\u7CFB\\u7EDF\\u76F8\\u5173/\\u4EE3\\u7801/advance-platform/node_modules/core-js/modules/es6.array.iterator.js\";\nimport \"/Users/dongxuwei/Desktop/\\u7CFB\\u7EDF\\u76F8\\u5173/\\u4EE3\\u7801/advance-platform/node_modules/core-js/modules/es6.promise.js\";\nimport \"/Users/dongxuwei/Desktop/\\u7CFB\\u7EDF\\u76F8\\u5173/\\u4EE3\\u7801/advance-platform/node_modules/core-js/modules/es6.object.assign.js\";\nimport \"/Users/dongxuwei/Desktop/\\u7CFB\\u7EDF\\u76F8\\u5173/\\u4EE3\\u7801/advance-platform/node_modules/core-js/modules/es7.promise.finally.js\";\n\nvar _this = this;\n\nimport Vue from 'vue';\nimport 'normalize.css/normalize.css'; // A modern alternative to CSS resets\n\nimport ElementUI from 'element-ui';\nimport 'element-ui/lib/theme-chalk/index.css';\nimport locale from 'element-ui/lib/locale/lang/en'; // lang i18n\n\nimport '@/styles/index.scss'; // global css\n\nimport App from \"./App\";\nimport store from \"./store\";\nimport router from \"./router\";\nimport '@/icons'; // icon\n\nimport '@/permission'; // permission control\n\nimport axios from 'axios';\nimport VueAxios from 'vue-axios';\naxios.defaults.withCredentials = true; // 返回数据拦截处理\n\naxios.interceptors.response.use(function (response) {\n  if (response.data) {\n    if (response.data.errcode == '3') {\n      console.log('未登录,重新登录');\n      v.$alert('会话过期请重新登录', '提示', {\n        confirmButtonText: '确定',\n        callback: function callback(action) {}\n      });\n      store.dispatch(\"user/logout\");\n      router.push(\"/login?redirect=\".concat(_this.$route.fullPath));\n      return;\n    } else if (response.data.errcode == '0') {\n      return {\n        code: 0,\n        msg: response.data.errmsg\n      };\n    } else {\n      return {\n        code: 1,\n        data: response.data.data[0]\n      };\n    }\n  } else {}\n}, function (error) {\n  return Promise.reject(error.response);\n}); // axios.defaults.headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8;application/json;';\n\nVue.use(VueAxios, axios);\nimport clipboard from 'clipboard';\nVue.prototype.clipboard = clipboard;\nimport { urls } from \"@/utils/url.js\";\nVue.prototype.urls = urls; // import { GET, POST, JPOST } from \"@/utils/httpRequst.js\";\n// Vue.prototype.GET = GET;\n// Vue.prototype.POST = POST;\n// Vue.prototype.JPOST = JPOST;\n\n/**\n * If you don't want to use mock-server\n * you want to use MockJs for mock api\n * you can execute: mockXHR()\n *\n * Currently MockJs will be used in the production environment,\n * please remove it before going online! ! !\n */\n\nimport { mockXHR } from \"../mock\";\n\nif (process.env.NODE_ENV === 'production') {\n  mockXHR();\n} // set ElementUI lang to EN\n\n\nVue.use(ElementUI);\nVue.config.productionTip = false;\nvar v = new Vue({\n  el: '#app',\n  router: router,\n  store: store,\n  render: function render(h) {\n    return h(App);\n  }\n});",null]}